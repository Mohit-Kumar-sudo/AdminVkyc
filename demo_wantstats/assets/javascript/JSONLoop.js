!function(t){var s=[];t.JSONLoop=function(t,n,i){this.id=n,this.children=i,this.count=0,this.countNodes(t),this.total=this.count+0},t.JSONLoop.prototype={constructor:JSONLoop,isEmpty:function(t){for(var n in t)return!1;return!0},countNodes:function(t){var n=this;return this.count++,!(!t||n.isEmpty(t))&&void(t[n.children]&&t[n.children].forEach(function(t){n.countNodes(t)}))},generateClone:function(t){var n,i={};for(n in t)n!==this.children&&(i[n]=t[n]);return i},findNodeById:function(t,n,i){var o;t[this.id]===n?(this.count=this.total+0,i(null,t)):(1===this.count&&(this.count=this.total+0,i("the node does not exist",null)),this.count--,t[this.children]&&t[(o=this).children].forEach(function(t){o.findNodeById(t,n,i)}))},matchConditions:function(i,o){var e=!0;return Object.keys(o).forEach(function(n){if("string"==typeof o[n]||"number"==typeof o[n]){if(i[n]!==o[n])return e=!1}else if(o[n]instanceof RegExp){if(!o[n].test(i[n]))return e=!1}else if("object"==typeof o[n]&&(Object.keys(o[n]).forEach(function(t){switch(t){case">":if(!(i[n]>o[n][t]))return e=!1;break;case"<":if(!(i[n]<o[n][t]))return e=!1;break;case">=":if(!(i[n]>=o[n][t]))return e=!1;break;case"<=":if(!(i[n]<=o[n][t]))return e=!1;break;case"!==":if(i[n]===o[n][t])return e=!1}}),!e))return!1}),!!e},findNodes:function(t,n,i){var o,e,r=this,c=[];return t=t,o=n,e=i,void(r.matchConditions(t,o)?(s.push(t),1===r.count&&(r.count=r.total+0,c=s.slice(0),s=[],e(null,c)),r.count--):(1===r.count&&(r.count=r.total+0,c=s.slice(0),s=[],e(null,c)),r.count--,t[r.children]&&t[r.children].forEach(function(t){r.findNodes(t,o,e)})))},findParent:function(n,i,o,e){var r,c=this;1===this.count?(this.count=this.total+0,o("its parent node does not exist",null)):(this.count--,void 0!==n[this.children]&&(r=!0,n[this.children].forEach(function(t){if(t[c.id]===i[c.id])return c.count=c.total+0,o(null,e?c.generateClone(n):n),r=!1}),r&&n[this.children].forEach(function(t){c.findParent(t,i,o)})))},findSiblings:function(t,o,e){var r=this;this.findParent(t,o,function(t,n){var i;t?e("its sibling nodes do not exist",null):(i=[],n[r.children].forEach(function(t){t[r.id]!==o[r.id]&&i.push(r.generateClone(t))}),e(null,i))},!1)},findAncestors:function(i,t,o){var n,e=this;t[this.id]===i[this.id]?(n=s.slice(0),s=[],o(null,n)):this.findParent(i,t,function(t,n){t?o("its ancestor nodes do not exist",null):(s.push(n),e.findAncestors(i,n,o))})}}}(window);